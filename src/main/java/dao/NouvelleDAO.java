/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.NouvelleDAO to edit this template
 */
package dao;

import entities.Nouvelle;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

/**
 *
 * @author Tha√Øs GENIN
 */
public class NouvelleDAO extends DAO<Nouvelle> {

    public NouvelleDAO() {
        super("Nouvelle");
    }

    @Override
    protected Nouvelle createObject(ResultSet rs) throws SQLException {
        Nouvelle nouv = new Nouvelle();
        nouv.setId_Nouvelle(rs.getInt("id_Nouvelle"));
        nouv.setTitre(rs.getString("titre"));
        nouv.setDescriptif("descriptif");
        nouv.setContenu(rs.getString("contenu"));
        nouv.setDate_publication(rs.getTimestamp("date_publication"));
        nouv.setUtilisateur(DAOFactory.getUtilisateurDAO().read(rs.getInt("utilisateur")));
        return nouv;
    }

    @Override
    public void create(Nouvelle nouv) {
        String sql = "INSERT INTO " + table + " (titre, descriptif, contenu, date_publication, id_Utilisateur) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, nouv.getTitre());
            pstmt.setString(2, nouv.getDescriptif());
            pstmt.setString(3, nouv.getContenu());
            pstmt.setTimestamp(4, nouv.getDate_publication());
            pstmt.setInt(5, nouv.getUtilisateur().getId());
            int nbLines = pstmt.executeUpdate();
            if (nbLines == 1) {
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                autoGeneratedKeys.first();
                int id = autoGeneratedKeys.getInt(1);
                nouv.setId(id);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'insertion : " + ex.getMessage());
        }
    }

    @Override
    protected void update(Nouvelle nouv) {
        String sql = "UPDATE " + table + " SET titre=?, descriptif=?, contenu=?, date_publication=?, utilisateur=? WHERE id_Nouvelle=?";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            pstmt.setString(1, nouv.getTitre());
            pstmt.setString(2, nouv.getDescriptif());
            pstmt.setString(3, nouv.getContenu());
            pstmt.setTimestamp(4, nouv.getDate_publication());
            pstmt.setInt(5, nouv.getUtilisateur().getId());
            pstmt.setInt(6, nouv.getId());

            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'update : " + ex.getMessage());
        }
    }

    public Collection<Nouvelle> listLastN(int n) {
        ArrayList<Nouvelle> list = new ArrayList<>();
        String sql = "SELECT * FROM " + table + " ORDER BY created DESC LIMIT ?";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            pstmt.setInt(1, n);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Nouvelle obj = createObject(rs);
                list.add(obj);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors du listage : " + ex.getMessage());
        }
        return list;

    }
}
