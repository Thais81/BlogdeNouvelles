
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dao;

import entities.Utilisateur;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

/**
 *
 * @author Caroline Berg√©
 */
public class UtilisateurDAO extends DAO<Utilisateur> {

    public UtilisateurDAO() {
        super("utilisateur");
    }

    @Override
    public Utilisateur read(Integer id) {
        Utilisateur obj = null;
        String sql = "SELECT * FROM person WHERE id_Utilisateur=?";
        PreparedStatement pstmt;
        try {
            pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, id);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                obj = new Utilisateur();
                obj.setId(rs.getInt("id_Utilisateur"));
                obj.setLogin(rs.getString("pseudo"));
                obj.setPassword(rs.getString("mot_de_passe"));
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la lecture : " + ex.getMessage());
        }
        return obj;
    }

    public Utilisateur read(String login) {
        Utilisateur obj = null;
        String sql = "SELECT * FROM person WHERE pseudo=?";
        PreparedStatement pstmt;
        try {
            pstmt = connexion.prepareStatement(sql);
            pstmt.setString(1, login);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                obj = new Utilisateur();
                obj.setId(rs.getInt("id_Utilisateur"));
                obj.setLogin(rs.getString("mot_de_passe"));
                obj.setPassword(rs.getString("mot_de_passe"));
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la lecture : " + ex.getMessage());
        }
        return obj;
    }

    @Override
    public void create(Utilisateur obj) {
        String sql = "INSERT INTO person (pseudo, mot_de_passe) "
                + "VALUES (?, ?)";
        try {
            PreparedStatement pstmt = connexion
                    .prepareStatement(
                            sql,
                            PreparedStatement.RETURN_GENERATED_KEYS
                    );
            pstmt.setString(1, obj.getLogin());
            pstmt.setString(2, obj.getPassword());
            int nbLines = pstmt.executeUpdate();
            if (nbLines == 1) {
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                autoGeneratedKeys.first();
                int id = autoGeneratedKeys.getInt(1);
                obj.setId(id);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'insertion : " + ex.getMessage());
        }
    }

    @Override
    public void update(Utilisateur obj) {
        String sql = "UPDATE person SET login=?, mot_de_passe=? "
                + "WHERE id_person=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setString(1, obj.getLogin());
            pstmt.setString(2, obj.getPassword());
            pstmt.setInt(3, obj.getId());
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'update : " + ex.getMessage());
        }
    }

    @Override
    public void delete(Integer id) {
        String sql = "DELETE FROM person WHERE id_Utilisateur=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, id);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.err.println("Erreur lors du delete : " + ex.getMessage());
        }
    }

    @Override
    public int count() {
        int count = 0;
        String sql = "SELECT FROM AS c FROM Utilisateur";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                count = rs.getInt("c");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors du comptage : " + ex.getMessage());
        }
        return count;
    }

    @Override
    public Collection<Utilisateur> list() {
        ArrayList<Utilisateur> list = new ArrayList<>();
        String sql = "SELECT * FROM person";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Utilisateur p = new Utilisateur();
                p.setId(rs.getInt("id_Utilisateur"));
                p.setLogin(rs.getString("pseudo"));
                p.setPassword(rs.getString("mot_de_passe"));
                list.add(p);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors du listage : " + ex.getMessage());
        }
        return list;
    }

    @Override
    protected Utilisateur createObject(ResultSet rs) throws SQLException {
        Utilisateur obj = new Utilisateur();
        obj.setId(rs.getInt("id_" + table));
        obj.setLogin(rs.getString("pseudo"));
        obj.setPassword(rs.getString("mot_de_passe"));
        return obj;
    }

}
